@page
@model BoticaOnline.Web.Pages.Pedidos.RegistroModel
@using BoticaOnline.Web.ViewModels
@using System.Text.Json

@{
    ViewData["Title"] = "Registrar Nuevo Pedido";
}

<h1 class="display-4">@ViewData["Title"]</h1>
<hr />

<form method="post" id="pedidoForm">
    
    <input type="hidden" asp-for="CarritoJson" id="carritoJsonInput" />

    <div class="card mb-4">
        <div class="card-header bg-primary text-white">Información del Cliente</div>
        <div class="card-body">
            <div class="form-group">
                <label asp-for="ClienteSeleccionadoId" class="form-label">Seleccionar Cliente</label>
                <select asp-for="ClienteSeleccionadoId" 
                        asp-items="Model.ClientesSelectList" 
                        class="form-control"
                        required>
                    <option value="">-- Seleccione un Cliente --</option>
                </select>
                <span asp-validation-for="ClienteSeleccionadoId" class="text-danger"></span>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-success text-white">Agregar Productos</div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <label for="productoSelect" class="form-label">Producto</label>
                    <select id="productoSelect" class="form-control mb-3">
                        <option value="">-- Seleccionar Producto --</option>
                        @foreach (var p in Model.ProductosDisponibles)
                        {
                            <option value="@p.Id" 
                                    data-precio="@p.Precio.ToString("N2")" 
                                    data-nombre="@p.Nombre"
                                    data-stock="@p.Stock">
                                @p.Nombre ($@p.Precio.ToString("N2")) - Stock: @p.Stock
                            </option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="cantidadInput" class="form-label">Cantidad</label>
                    <input type="number" id="cantidadInput" class="form-control mb-3" value="1" min="1" />
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="button" id="agregarBtn" class="btn btn-success w-100">
                        <i class="fas fa-cart-plus"></i> Agregar
                    </button>
                </div>
            </div>
            <div id="stockWarning" class="alert alert-danger mt-2 d-none">Stock insuficiente. Máximo disponible: <span id="maxStock"></span></div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header bg-warning text-dark">Detalle del Pedido</div>
        <div class="card-body">
            <table class="table table-sm" id="carritoTable">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Precio Unitario</th>
                        <th>Subtotal</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    </tbody>
                <tfoot>
                    <tr>
                        <th colspan="3" class="text-end">TOTAL:</th>
                        <th id="totalPedido">$0.00</th>
                        <th></th>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <div class="d-flex justify-content-end">
        <button type="submit" id="finalizarBtn" class="btn btn-primary btn-lg" disabled>
            <i class="fas fa-check-circle"></i> Finalizar Pedido
        </button>
        <a asp-page="./Listado" class="btn btn-secondary btn-lg ms-3">Cancelar</a>
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        // Array para almacenar los items del carrito (similar al PedidoItemViewModel)
        let carrito = [];

        // Función para actualizar la tabla y el total
        function actualizarCarrito() {
            const tbody = document.getElementById('carritoTable').getElementsByTagName('tbody')[0];
            const totalElement = document.getElementById('totalPedido');
            const finalizarBtn = document.getElementById('finalizarBtn');
            const carritoJsonInput = document.getElementById('carritoJsonInput');
            
            tbody.innerHTML = '';
            let totalGeneral = 0;

            carrito.forEach((item, index) => {
                const subtotal = item.Cantidad * item.PrecioUnitario;
                totalGeneral += subtotal;

                const row = tbody.insertRow();
                row.insertCell().textContent = item.NombreProducto;
                row.insertCell().textContent = item.Cantidad;
                row.insertCell().textContent = '$' + item.PrecioUnitario.toFixed(2);
                row.insertCell().textContent = '$' + subtotal.toFixed(2);
                
                const deleteCell = row.insertCell();
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'X';
                deleteBtn.className = 'btn btn-sm btn-danger';
                deleteBtn.onclick = () => {
                    carrito.splice(index, 1); // Eliminar del array
                    actualizarCarrito();
                };
                deleteCell.appendChild(deleteBtn);
            });

            totalElement.textContent = '$' + totalGeneral.toFixed(2);
            
            // Habilitar/Deshabilitar el botón de finalizar
            finalizarBtn.disabled = carrito.length === 0;

            // Actualizar el campo oculto JSON para enviar al servidor
            carritoJsonInput.value = JSON.stringify(carrito);
        }

        // --- Lógica del Botón Agregar ---
        document.getElementById('agregarBtn').addEventListener('click', () => {
            const select = document.getElementById('productoSelect');
            const cantidadInput = document.getElementById('cantidadInput');
            const selectedOption = select.options[select.selectedIndex];
            
            const productoId = parseInt(selectedOption.value);
            const cantidad = parseInt(cantidadInput.value);
            const stockDisponible = parseInt(selectedOption.dataset.stock);

            if (!productoId || cantidad <= 0) return;
            
            // 1. Verificar Stock
            if (cantidad > stockDisponible) {
                document.getElementById('maxStock').textContent = stockDisponible;
                document.getElementById('stockWarning').classList.remove('d-none');
                return;
            } else {
                document.getElementById('stockWarning').classList.add('d-none');
            }

            const nombre = selectedOption.dataset.nombre;
            const precio = parseFloat(selectedOption.dataset.precio.replace(',', ''));
            
            // 2. Revisar si el producto ya existe en el carrito
            const existingItem = carrito.find(item => item.ProductoId === productoId);

            if (existingItem) {
                // Si existe, sumar la cantidad
                if (existingItem.Cantidad + cantidad > stockDisponible) {
                    alert('El stock combinado excede la cantidad disponible.');
                    return;
                }
                existingItem.Cantidad += cantidad;
            } else {
                // Si no existe, agregarlo
                carrito.push({
                    ProductoId: productoId,
                    NombreProducto: nombre,
                    PrecioUnitario: precio,
                    Cantidad: cantidad
                });
            }

            // 3. Limpiar y actualizar
            select.selectedIndex = 0; // Deseleccionar
            cantidadInput.value = 1;
            actualizarCarrito();
        });

        // Inicializar al cargar la página
        document.addEventListener('DOMContentLoaded', actualizarCarrito);
    </script>
}